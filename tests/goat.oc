#
# MC goat problem test, for performance comparison with threadpool2.cpp
# @author tweber
# @date 24-dec-18
# @license see 'LICENSE.EUPL' file
#

global iters = 5000;
global use_own_randi = true;
global themult = 1234567;
global theinc = 0;
global themod = 0xfffffffe;
global theseed = 1234567;


printf("Number of MC iterations: %d.\n", iters);


# simplistic rng test
function num = my_randi(max)
	global use_own_randi;

	if use_own_randi
		global themult;
		global theinc;
		global themod;
		global theseed;

		theseed = mod(themult*theseed + theinc, themod);
		num = mod(theseed, max) + 1;
	else
		num = randi(max);
	endif
endfunction


# number of wins without and with change, respectively
won_stayed = 0;
won_changed = 0;

for iter = 1:iters
	printf("\r%.2f%%    ", 100.*iter/iters);

	# place goats
	where_nogoat = my_randi(3);
	goats = [true, true, true];
	goats(where_nogoat) = false;

	# pick a door
	picked = my_randi(3);
	if !goats(picked)
		++won_stayed;
	endif


	# reveal a goat
	revealed_goat = 0;
	while true
		revealed_goat = my_randi(3);

		# skip the picked door
		if revealed_goat == picked
			continue;
		endif

		# only reveal goats
		if !goats(revealed_goat)
			continue;
		endif

		break;
	endwhile

	# pick remaining door
	changedpick = 0;
	for changedpick = 1:3
		if changedpick == picked
			continue;
		endif
		if changedpick == revealed_goat
			continue;
		endif

		break;
	endfor

	# won with change?
	if !goats(changedpick)
		++won_changed;
	endif
endfor


printf("\n");
printf("Probability to win without change: %.2f.\n", won_stayed/iters);
printf("Probability to win with change: %.2f.\n", won_changed/iters);
