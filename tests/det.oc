#
# determinant test
# @date 24-nov-18
# @author tweber
# @license see 'LICENSE.EUPL' file
#


global g_eps = 1e-6


function d = mydet(M)
	global g_eps
	d = 0.;

	NUMROWS = size(M, 1);
	NUMCOLS = size(M, 2);

	if NUMROWS != NUMCOLS
		printf("Need square matrix!\n");
		return;
	endif


	# recursion end conditions
	if NUMROWS == 0
		d = 0.;
		return;
	elseif NUMROWS == 1
		d = M(1, 1);
		return;
	endif


	# find the column with the most zeros
	COL = 1;
	maxZeros = 0;

	for _COL = 1 : NUMCOLS
		numZeros = 0;

		for _ROW = 1 : NUMROWS
			if M(_ROW, _COL) == 0.
				numZeros += 1;
			endif
		endfor

		if numZeros > maxZeros
			COL = _COL;
			maxZeros = numZeros;
		endif
	endfor

	#printf("Using column %d.\n", COL);


	# calculate determinant
	for ROW = 1:NUMROWS
		elem = M(ROW, COL);

		if abs(elem) <= g_eps
			continue;
		endif

		sign = 1.;
		if mod(ROW+COL, 2) != 0
			sign = -1.;
		endif

		Msub = M;
		Msub([ROW], :) = [];
		Msub(:, [COL]) = [];
		d += sign * elem * mydet(Msub);
	endfor

endfunction




# test and comparison with built-in det() function

mat1 = [ 1,2 ; 3,4 ];
mat2 = [ 1.5,2.2,0. ; -4,5,-6 ; 7,-8,9 ];

printf("det=%g, check=%g\n", mydet(mat1), det(mat1));
printf("det=%g, check=%g\n", mydet(mat2), det(mat2));
