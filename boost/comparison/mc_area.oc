#
# mc area test for performance comparison with threadpool.cpp
# @author tweber
# @date 24-dec-18
# @license see 'LICENSE.EUPL' file
#

#
# is the point (x,y) in the circle with radius rad?
#
function b = is_in_circle(rad, x, y)
	r = sqrt(x*x + y*y);
	b = r <= rad;
endfunction


#
# is the point (x,y) in the fractal?
#
function [b,norm] = is_in_mandel(lim, iter, x, y)
	z = 0 + 0i;
	pos = x + y*1i;

	for i = 1:iter
		z = z*z + pos;
	endfor

	norm = abs(z);
	b = norm <= lim;
endfunction


#
# calculate the area of function is_inside(x,y),
# which is inscribed in a MC rectangle of size a*b
#
function thearea = calc_area(a, b, is_inside, N)
	area = 0.;
	
	for i = 1:N
		x = rand()*a - a*0.5;
		y = rand()*b - b*0.5;

		if is_inside(x, y)
			++area;
		endif
	endfor

	thearea = area/N * a*b;
endfunction


function plot_mandel(iters)
	startx = -2.;
	endx = 2.;
	deltax = 0.02;
	starty = -2.;
	endy = 2.;
	deltay = 0.02;

	thefile = fopen("mandel.dat", "w");
	printf("Calculating plot...\n");

	for y = linspace(starty, endy, round((endy-starty)/deltay))
		printf("\r%.2f%%    ", 100.*(y-starty)/(endy-starty));

		for x = linspace(startx, endx, round((endx-startx)/deltax))
			[is_inside, norm] = is_in_mandel(2., iters, x, y);
			if !is_inside
				norm = 0.;
			endif

			fprintf(thefile, "%g ", norm);	
		endfor

		fprintf(thefile, "\n");	
	endfor

	printf("\n");
	fclose(thefile);
endfunction



# -----------------------------------------------------------------------------
mandel_iters = 100;
rand_iters = 10000;
printf("Number of MC iterations: %d.\n", rand_iters);

circ = calc_area(4., 4., @(x,y) is_in_circle(1., x, y), rand_iters);
printf("Unit circle area: %g.\n", circ);

mand = calc_area(4., 4., @(x,y) is_in_mandel(2., mandel_iters, x, y)(1), rand_iters);
printf("Mandel area: %g.\n", mand);
plot_mandel(mandel_iters);
# -----------------------------------------------------------------------------
